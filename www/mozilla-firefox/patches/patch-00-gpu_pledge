$OpenBSD$

https://bugzilla.mozilla.org/show_bug.cgi?id=1580268

Index: dom/ipc/ContentChild.cpp
--- dom/ipc/ContentChild.cpp.orig
+++ dom/ipc/ContentChild.cpp
@@ -1744,7 +1744,7 @@ mozilla::ipc::IPCResult ContentChild::RecvSetProcessSa
 #  elif defined(XP_MACOSX)
   sandboxEnabled = StartMacOSContentSandbox();
 #  elif defined(__OpenBSD__)
-  sandboxEnabled = StartOpenBSDSandbox(GeckoProcessType_Content);
+  sandboxEnabled = StartOpenBSDSandbox(GeckoProcessType_Content, NULL);
   /* dont overwrite an existing session dbus address, but ensure it is set */
   if (!PR_GetEnv("DBUS_SESSION_BUS_ADDRESS")) {
     static LazyLogModule sPledgeLog("SandboxPledge");
@@ -4052,7 +4052,7 @@ void ContentChild::HoldBrowsingContextGroup(BrowsingCo
 
 static LazyLogModule sPledgeLog("SandboxPledge");
 
-bool StartOpenBSDSandbox(GeckoProcessType type) {
+bool StartOpenBSDSandbox(GeckoProcessType type, char *passedPledge) {
   nsAutoCString promisesString;
   nsAutoCString processTypeString;
 
@@ -4068,27 +4068,37 @@ bool StartOpenBSDSandbox(GeckoProcessType type) {
                               promisesString);
       break;
 
+    case GeckoProcessType_GPU:
+      processTypeString = "gpu";
+      if (!passedPledge && !PR_GetEnv("MOZ_DISABLE_PLEDGE"))
+        mozilla::ipc::FatalError("no pledge argument passed to GPU process",
+          false);
+      promisesString = passedPledge;
+      break;
+
     default:
       MOZ_ASSERT(false, "unknown process type");
       return false;
-  };
+  }
 
-  if (pledge(promisesString.get(), NULL) == -1) {
-    if (errno == EINVAL) {
-      MOZ_LOG(sPledgeLog, LogLevel::Error,
-              ("pledge promises for %s process is a malformed string: '%s'\n",
+  if (!PR_GetEnv("MOZ_DISABLE_PLEDGE")) {
+    if (pledge(promisesString.get(), NULL) == -1) {
+      if (errno == EINVAL) {
+        MOZ_LOG(sPledgeLog, LogLevel::Error,
+                ("pledge promises for %s process is a malformed string: '%s'\n",
+                 processTypeString.get(), promisesString.get()));
+      } else if (errno == EPERM) {
+        MOZ_LOG(
+            sPledgeLog, LogLevel::Error,
+            ("pledge promises for %s process can't elevate privileges: '%s'\n",
+             processTypeString.get(), promisesString.get()));
+      }
+      return false;
+    } else {
+      MOZ_LOG(sPledgeLog, LogLevel::Debug,
+              ("pledged %s process with promises: '%s'\n",
                processTypeString.get(), promisesString.get()));
-    } else if (errno == EPERM) {
-      MOZ_LOG(
-          sPledgeLog, LogLevel::Error,
-          ("pledge promises for %s process can't elevate privileges: '%s'\n",
-           processTypeString.get(), promisesString.get()));
     }
-    return false;
-  } else {
-    MOZ_LOG(sPledgeLog, LogLevel::Debug,
-            ("pledged %s process with promises: '%s'\n",
-             processTypeString.get(), promisesString.get()));
   }
   return true;
 }

Index: browser/app/profile/firefox.js
--- browser/app/profile/firefox.js.orig
+++ browser/app/profile/firefox.js
@@ -1135,6 +1135,7 @@ pref("security.sandbox.content.syscall_whitelist", "")
 pref("security.sandbox.pledge.main", "stdio rpath wpath cpath inet proc exec prot_exec flock ps sendfd recvfd dns vminfo tty drm unix fattr getpw mcast");
 pref("security.sandbox.content.level", 1);
 pref("security.sandbox.pledge.content", "stdio rpath wpath cpath inet recvfd sendfd prot_exec unix drm ps");
+pref("security.sandbox.pledge.gpu", "stdio rpath wpath cpath ps sendfd recvfd drm dns unix prot_exec");
 #endif
 
 #if defined(MOZ_SANDBOX)

Index: gfx/ipc/GPUProcessImpl.cpp
--- gfx/ipc/GPUProcessImpl.cpp.orig
+++ gfx/ipc/GPUProcessImpl.cpp
@@ -10,6 +10,8 @@
 
 #if defined(OS_WIN) && defined(MOZ_SANDBOX)
 #  include "mozilla/sandboxTarget.h"
+#elif defined(__OpenBSD__) && defined(MOZ_SANDBOX)
+#  include "mozilla/SandboxSettings.h"
 #endif
 
 namespace mozilla {
@@ -31,6 +33,9 @@ bool GPUProcessImpl::Init(int aArgc, char* aArgv[]) {
   char* prefMapHandle = nullptr;
   char* prefsLen = nullptr;
   char* prefMapSize = nullptr;
+#if defined(__OpenBSD__) && defined(MOZ_SANDBOX)
+  char* pledge = nullptr;
+#endif
   for (int i = 1; i < aArgc; i++) {
     if (!aArgv[i]) {
       continue;
@@ -61,7 +66,19 @@ bool GPUProcessImpl::Init(int aArgc, char* aArgv[]) {
       }
       prefMapSize = aArgv[i];
     }
+#if defined(__OpenBSD__) && defined(MOZ_SANDBOX)
+    else if (strcmp(aArgv[i], "-GPUpledge") == 0) {
+      if (++i == aArgc) {
+        return false;
+      }
+      pledge = aArgv[i];
+    }
+#endif
   }
+
+#if defined(__OpenBSD__) && defined(MOZ_SANDBOX)
+  StartOpenBSDSandbox(GeckoProcessType_GPU, pledge);
+#endif
 
   SharedPreferenceDeserializer deserializer;
   if (!deserializer.DeserializeFromSharedMemory(prefsHandle, prefMapHandle,

Index: gfx/ipc/GPUProcessManager.cpp
--- gfx/ipc/GPUProcessManager.cpp.orig
+++ gfx/ipc/GPUProcessManager.cpp
@@ -163,6 +163,20 @@ void GPUProcessManager::LaunchGPUProcess() {
   extraArgs.push_back("-parentBuildID");
   extraArgs.push_back(parentBuildID.get());
 
+#if defined(__OpenBSD__) && defined(MOZ_SANDBOX)
+  {
+    nsAutoCString pledgeString;
+
+    if (!PR_GetEnv("MOZ_DISABLE_PLEDGE")) {
+      // Preferences are not loaded by the GPU process, so we need to pass the
+      // pledge string
+      Preferences::GetCString("security.sandbox.pledge.gpu", pledgeString);
+      extraArgs.push_back("-GPUpledge");
+      extraArgs.push_back(pledgeString.get());
+    }
+  }
+#endif
+
   // The subprocess is launched asynchronously, so we wait for a callback to
   // acquire the IPDL actor.
   mProcess = new GPUProcessHost(this);

Index: security/sandbox/common/SandboxSettings.h
--- security/sandbox/common/SandboxSettings.h.orig
+++ security/sandbox/common/SandboxSettings.h
@@ -22,7 +22,7 @@ int ClampFlashSandboxLevel(const int aLevel);
 #endif
 
 #if defined(__OpenBSD__)
-bool StartOpenBSDSandbox(GeckoProcessType type);
+bool StartOpenBSDSandbox(GeckoProcessType type, char *passedPledge);
 #endif
 
 }  // namespace mozilla

Index: toolkit/xre/nsAppRunner.cpp
--- toolkit/xre/nsAppRunner.cpp.orig
+++ toolkit/xre/nsAppRunner.cpp
@@ -4242,7 +4242,7 @@ void AddSandboxAnnotations() {
   sandboxCapable = SandboxInfo::Get().CanSandboxContent();
 #  elif defined(__OpenBSD__)
   sandboxCapable = true;
-  StartOpenBSDSandbox(GeckoProcessType_Default);
+  StartOpenBSDSandbox(GeckoProcessType_Default, NULL);
 #  endif
 
   CrashReporter::AnnotateCrashReport(
